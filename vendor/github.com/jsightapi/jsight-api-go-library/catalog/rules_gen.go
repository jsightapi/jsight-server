// Autogenerated code!
// DO NOT EDIT!
//
// Generated by OrderedMap generator from the internal/cmd/generator command.

package catalog

import (
	"bytes"
	"encoding/json"
)

// Set sets a value with specified key.
func (m *Rules) Set(k string, v Rule) {
	m.mx.Lock()
	defer m.mx.Unlock()

	if m.data == nil {
		m.data = map[string]Rule{}
	}
	if !m.has(k) {
		m.order = append(m.order, k)
	}
	m.data[k] = v
}

// SetToTop do the same as Set, but new key will be placed on top of the order
// map.
func (m *Rules) SetToTop(k string, v Rule) {
	m.mx.Lock()
	defer m.mx.Unlock()

	if m.data == nil {
		m.data = map[string]Rule{}
	}
	if !m.has(k) {
		m.order = append([]string{k}, m.order...)
	}
	m.data[k] = v
}

// Update updates a value with specified key.
func (m *Rules) Update(k string, fn func(v Rule) Rule) {
	m.mx.Lock()
	defer m.mx.Unlock()

	if !m.has(k) {
		// Prevent from possible nil pointer dereference if map value type is a
		// pointer.
		return
	}

	m.data[k] = fn(m.data[k])
}

// GetValue gets a value by key.
func (m *Rules) GetValue(k string) Rule {
	m.mx.RLock()
	defer m.mx.RUnlock()

	return m.data[k]
}

// Get gets a value by key.
func (m *Rules) Get(k string) (Rule, bool) {
	m.mx.RLock()
	defer m.mx.RUnlock()

	v, ok := m.data[k]
	return v, ok
}

// Has checks that specified key is set.
func (m *Rules) Has(k string) bool {
	m.mx.RLock()
	defer m.mx.RUnlock()

	return m.has(k)
}

func (m *Rules) has(k string) bool {
	_, ok := m.data[k]
	return ok
}

// Len returns count of values.
func (m *Rules) Len() int {
	m.mx.RLock()
	defer m.mx.RUnlock()

	return len(m.data)
}

// Find finds first matched item from the map.
func (m *Rules) Find(fn findRulesFunc) (RulesItem, bool) {
	m.mx.RLock()
	defer m.mx.RUnlock()

	for _, k := range m.order {
		if fn(k, m.data[k]) {
			return RulesItem{
				Key:   k,
				Value: m.data[k],
			}, true
		}
	}
	return RulesItem{}, false
}

type findRulesFunc = func(k string, v Rule) bool

// Each iterates and perform given function on each item in the map.
func (m *Rules) Each(fn eachRulesFunc) error {
	m.mx.RLock()
	defer m.mx.RUnlock()

	for _, k := range m.order {
		if err := fn(k, m.data[k]); err != nil {
			return err
		}
	}
	return nil
}

// EachReverse act almost the same as Each but in reverse order.
func (m *Rules) EachReverse(fn eachRulesFunc) error {
	m.mx.RLock()
	defer m.mx.RUnlock()

	for i := len(m.order) - 1; i >= 0; i-- {
		k := m.order[i]
		if err := fn(k, m.data[k]); err != nil {
			return err
		}
	}
	return nil
}

type eachRulesFunc = func(k string, v Rule) error

func (m *Rules) EachSafe(fn eachSafeRulesFunc) {
	m.mx.RLock()
	defer m.mx.RUnlock()

	for _, k := range m.order {
		fn(k, m.data[k])
	}
}

type eachSafeRulesFunc = func(k string, v Rule)

// Map iterates and changes values in the map.
func (m *Rules) Map(fn mapRulesFunc) error {
	m.mx.Lock()
	defer m.mx.Unlock()

	for _, k := range m.order {
		v, err := fn(k, m.data[k])
		if err != nil {
			return err
		}
		m.data[k] = v
	}
	return nil
}

type mapRulesFunc = func(k string, v Rule) (Rule, error)

// RulesItem represent single data from the Rules.
type RulesItem struct {
	Key   string
	Value Rule
}

var _ json.Marshaler = &Rules{}

func (m *Rules) MarshalJSON() ([]byte, error) {
	m.mx.RLock()
	defer m.mx.RUnlock()

	var buf bytes.Buffer
	buf.WriteRune('{')

	for i, k := range m.order {
		if i != 0 {
			buf.WriteRune(',')
		}

		// marshal key
		key, err := json.Marshal(k)
		if err != nil {
			return nil, err
		}
		buf.Write(key)
		buf.WriteRune(':')

		// marshal value
		val, err := json.Marshal(m.data[k])
		if err != nil {
			return nil, err
		}
		buf.Write(val)
	}

	buf.WriteRune('}')
	return buf.Bytes(), nil
}
