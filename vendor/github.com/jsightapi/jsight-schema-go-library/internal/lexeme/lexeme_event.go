package lexeme

import (
	"fmt"

	"github.com/jsightapi/jsight-schema-go-library/bytes"
	"github.com/jsightapi/jsight-schema-go-library/fs"
)

// The flow of lexical events is generated by the scanner.
// Events can be used to build tokens, or for other analysis of the structure of the scanned document.

type LexEvent struct {
	file         *fs.File     // File containing the contents of the json and the file name
	lexEventType LexEventType // Type of found lexical event
	begin        bytes.Index  // Index of the start character of the found lexical event in the byte slice
	end          bytes.Index  // Index of the end character of the found lexical event in the byte slice
}

func NewLexEvent(t LexEventType, begin, end bytes.Index, file *fs.File) LexEvent {
	return LexEvent{
		file:         file,
		lexEventType: t,
		begin:        begin,
		end:          end,
	}
}

func (lex LexEvent) Value() bytes.Bytes {
	return lex.file.Content().Slice(lex.begin, lex.end)
}

func (lex LexEvent) File() *fs.File {
	return lex.file
}

func (lex LexEvent) Type() LexEventType {
	return lex.lexEventType
}

func (lex LexEvent) Begin() bytes.Index {
	return lex.begin
}

func (lex LexEvent) End() bytes.Index {
	return lex.end
}

func (lex LexEvent) String() string {
	return fmt.Sprintf("%s [%d:%d]", lex.lexEventType.String(), lex.begin, lex.end)
}
